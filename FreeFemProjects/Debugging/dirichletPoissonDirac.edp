func real SolvePoissonDirac(int n, bool showPlot)
{
    real x0 = 0, y0 = 0, x1 = 1, y1 = 1;
    border Gamma1(t=0,1) {x=x0+(x1-x0)*t; y=y0; label=1;}
    border Gamma2(t=0,1) {x=x1; y=y0+(y1-y0)*t; label=1;}
    border Gamma3(t=0,1) {x=x1-(x1-x0)*t; y=y1; label=1;}
    border Gamma4(t=0,1) {x=x0; y=y1-(y1-y0)*t; label=1;}
    real x00 = 0.49, y00 = 0.49, x11 = 0.51, y11 = 0.51;
    int m = 2;
    border Gamma5(t=0,1) {x=x00+(x11-x00)*t; y=y00; label=1;}
    border Gamma6(t=0,1) {x=x11; y=y00+(y11-y00)*t; label=1;}
    border Gamma7(t=0,1) {x=x11-(x11-x00)*t; y=y11; label=1;}
    border Gamma8(t=0,1) {x=x00; y=y11-(y11-y00)*t; label=1;}
    mesh box = buildmesh(Gamma1(n) + Gamma2(n) + Gamma3(n) + Gamma4(n) + Gamma5(-m) + Gamma6(-m) + Gamma7(-m) + Gamma8(-m));

    //Информация про дельта-функции
    real[int] xdelta = [0.5];
    real[int] ydelta = [0.5];
    real[int] cdelta = [1.0];

    fespace SpaceP1(box, P1);

    matrix D = interpolate(SpaceP1, xdelta, ydelta);

    SpaceP1 u, v;

    func g = log(sqrt((x-0.5)^2 + (y-0.5)^2))/(2*pi);

    SpaceP1 b;
    b[] = D*cdelta;
    b[] = -b[];

    solve Poisson(u, v)
        = int2d(box) (dx(u)*dx(v) + dy(u)*dy(v))
        + b[]
        + on(1, u=g);

    SpaceP1 analytical = log(sqrt((x-0.5)^2 + (y-0.5)^2))/(2*pi);
    if (showPlot)
    {
        plot(u, fill=true);
        plot(analytical, fill=true);
    }
    SpaceP1 err = u - analytical;
    real errL2 = sqrt(abs(int2d(box)(err^2)));

    return errL2;
}

cout << SolvePoissonDirac(256, 1);

// {
//     ofstream gnu("plot.gp");
//     for (int n = 2; n <= 256; n*=2)
//         gnu << n << " " << SolvePoissonDirac(n, 0) << endl;
// }

// exec("echo 'plot \"plot.gp\" w l \n pause 20 \n set term postscript \n set output \"gnuplot.eps\" \n replot \n quit' | gnuplot");
