load "iovtk"

func real SolveNeumannPoissonDirac(int nnodes, int t, real[int] xdelta, real[int] ydelta, real[int] cdelta, bool showPlot, bool savePlot)
{
    border a1(t=0, 2*pi){x=0.5*cos(t); y=0.5*sin(t); label=1;}
    mesh Th = buildmesh(a1(nnodes));

    fespace Vh(Th,P1); // P1 FE space
    int n = Vh.ndof;
    int n1 = n+1;

    Vh uh,vh; // unknown and test function. 

    //Определение Дельта-функции дирака
    matrix D = interpolate(Vh, xdelta, ydelta);
    Vh diracVector;
    diracVector[] = D*cdelta;

    
    varf va(uh,vh) =                    //  definition of  the problem 
        int2d(Th)( dx(uh)*dx(vh) + dy(uh)*dy(vh) ); //  bilinear form
    varf vL(uh,vh)=  diracVector[];
    varf vb(uh,vh)= int2d(Th)(1.*vh);

    matrix A=va(Vh,Vh);

    real[int] b(n);
    b = vL(0,Vh);

    real[int]  B = vb(0,Vh);

    // the block matrix
    matrix AA = [ [ A ,  B ] ,
                [ B', 0 ] ] ;

    real[int] bb(n+1),xx(n+1),b1(1),l(1);
    b1=0;
    // build the block rhs 
    bb = [b, b1];
    set(AA);
    xx = AA^-1*bb; // solve the linear system

    [uh[],l] = xx;  // set the value 
    //cout << " l = " << l(0) <<  " ,  b(u,1)  =" << B'*uh[]  << endl;
    if (showPlot)
        plot(uh,fill=true,wait=1);

    if (savePlot)
    {
        int[int] orderOut = [1];
        savevtk("fitzhugh/output-" + t + ".vtu", Th, uh, order=orderOut);
    }
}

real k1 = 2.;
real[int] xdelta = [0., 0.];
real[int] ydelta = [0.1, 0.2];

func real[int] fitzhugh(int numSteps, real dt, real x0, real y0, real a, real b, real c, real zConst)
{
    real[int] X(numSteps), Y(numSteps);
    X[0] = x0;
    Y[0] = y0

    for (int i = 1; i < numSteps; i++)
    {
        X[i] = X[i-1] + dt*c*(Y[i-1] + X[i-1] - pow(X[i-1], 3)/3 + zConst);
        Y[i] = Y[i-1] - dt/c*(X[i-1] - a + b*Y[i-1]);
    }

    // как возвращать два массива?
    return X;
}

real tend = 100.0,  dt = 0.5;
int numSteps = tend / dt;

real u0 = 1., w0 = 1., R = 0.1, Iext = 0.5, tau = 12.5, a =  0.7, b = 0.01;
real[int] solU(numSteps);
solU = fitzhugh(numSteps, dt, u0, w0, R, Iext, tau, a, b);

real t = 0;
for (int i = 0; i < numSteps; i++)
{
    real[int] cdelta = [solU[i], -solU[i]];
    SolveNeumannPoissonDirac(256, i, xdelta, ydelta, cdelta, 0, 1);
    t += dt;
    //cout << i;
}
