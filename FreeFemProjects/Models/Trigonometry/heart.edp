load "iovtk"

func real SolveNeumannPoissonDirac(int nnodes, int t, real[int] xdelta, real[int] ydelta, real[int] cdelta, bool showPlot, bool savePlot)
{
    border a1(t=0, 2*pi){x=cos(t); y=sin(t); label=1;}
    mesh Th = buildmesh(a1(nnodes));

    fespace Vh(Th,P1); // P1 FE space
    int n = Vh.ndof;
    int n1 = n+1;

    Vh uh,vh; // unknown and test function. 

    //Определение Дельта-функции дирака
    matrix D = interpolate(Vh, xdelta, ydelta);
    Vh diracVector;
    diracVector[] = D*cdelta;

    
    varf va(uh,vh) =                    //  definition of  the problem 
        int2d(Th)( dx(uh)*dx(vh) + dy(uh)*dy(vh) ); //  bilinear form
    varf vL(uh,vh)=  diracVector[];
    varf vb(uh,vh)= int2d(Th)(1.*vh);

    matrix A=va(Vh,Vh);

    real[int] b(n);
    b = vL(0,Vh);

    real[int]  B = vb(0,Vh);

    // the block matrix
    matrix AA = [ [ A ,  B ] ,
                [ B', 0 ] ] ;

    real[int] bb(n+1),xx(n+1),b1(1),l(1);
    b1=0;
    // build the block rhs 
    bb = [b, b1];
    set(AA);
    xx = AA^-1*bb; // solve the linear system

    [uh[],l] = xx;  // set the value 
    //cout << " l = " << l(0) <<  " ,  b(u,1)  =" << B'*uh[]  << endl;
    if (showPlot)
        plot(uh,fill=true,wait=1);

    if (savePlot)
    {
        int[int] orderOut = [1];
        savevtk("heart/heart" + t + ".vtu", Th, uh, order=orderOut);
    }
}

real k1 = 4, k4 = -4, k3 = -4, k4 = -4, k5 = -4, k6 = -4, k7 = -4, k8 = 4;
real phi1 = pi/2, phi2 = pi, phi3 = 3*pi/2, phi4 = 2*pi, phi5 = 5*pi/2, phi6 = 3*pi, phi7 = 7*pi/2, phi8 = -pi;
real[int] xdelta = [0.05, 0.25, 0.3, 0.4, 0.4, 0.3, 0.25, 0.05, -0.05, -0.25, -0.3, -0.4, -0.4, -0.3, -0.25, -0.05];
real[int] ydelta = [0.2, 0.3, 0.25, 0.05, -0.05, -0.25, -0.3, -0.4, -0.4, -0.3, -0.25, -0.05, 0.05, 0.25, 0.4, 0.2];

real tend = 20.0,  dt = 0.1;
int numSteps = tend / dt;
real t = 0;

for (int i = 0; i <= numSteps; i++)
{
    real[int] cdelta = [sin(k1*t+phi1), -sin(k1*t+phi1), sin(k2*t+phi2), -sin(k2*t+phi2), sin(k3*t+phi3), -sin(k3*t+phi3), sin(k4*t+phi4), -sin(k4*t+phi4), sin(k5*t+phi5), -sin(k5*t+phi5), sin(k6*t+phi6), -sin(k6*t+phi6), sin(k7*t+phi7), -sin(k7*t+phi7), sin(k8*t+phi8), -sin(k8*t+phi8)];
    SolveNeumannPoissonDirac(256, i, xdelta, ydelta, cdelta, 0, 1);
    t += dt;
    //cout << i;
}